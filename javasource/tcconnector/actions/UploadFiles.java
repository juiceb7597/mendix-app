// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package tcconnector.actions;

import java.io.InputStream;
import java.net.UnknownHostException;
import java.util.ArrayList;
import org.apache.commons.io.FilenameUtils;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import com.teamcenter.fms.servercache.FSCException;
import com.teamcenter.fms.servercache.proxy.CommonsFSCWholeFileIOImpl;
import tcconnector.foundation.TcConnection;
import tcconnector.internal.foundation.Constants;
import tcconnector.internal.foundation.FMSUtils;
import tcconnector.internal.foundation.Messages;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * SOA URL: 
 * Core-2010-04-DataManagement/createDatasets
 * Core-2006-03-FileManagement/commitDatasetFiles
 * 
 * Uploads one or more files** to Teamcenter using teamcenter FMS service. 
 * 
 * Input -
 * - Dataset.Documents association should hold files to be uploaded
 * 
 * Output -
 * - Action returns True or False in case of success and failure respectively. 
 * - In addtion to this UID property is updated on Dataset object which is passed as an input to action.
 * 
 * 
 * ** - Only one file upload is supported at the moment
 */
public class UploadFiles extends UserAction<java.lang.Boolean>
{
	/** @deprecated use DatasetParameter.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __DatasetParameter;
	private final tcconnector.proxies.Dataset DatasetParameter;
	private final java.lang.String NamedReference;
	private final java.lang.String ConfigurationName;

	public UploadFiles(
		IContext context,
		IMendixObject _datasetParameter,
		java.lang.String _namedReference,
		java.lang.String _configurationName
	)
	{
		super(context);
		this.__DatasetParameter = _datasetParameter;
		this.DatasetParameter = _datasetParameter == null ? null : tcconnector.proxies.Dataset.initialize(getContext(), _datasetParameter);
		this.NamedReference = _namedReference;
		this.ConfigurationName = _configurationName;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		boolean areFilesUploaded = Boolean.TRUE;
		try {

			if (!DatasetParameter.getDocuments().isEmpty()) {
				// Create Dataset
				JSONObject createDatasetResponse = createDatasets();
				if (isDatasetCreated(createDatasetResponse) == true) {
					// Dataset Created. Upload the file.
					// Method would throw exception in case of error. Hence no return value
					uploadFiletoFMS(createDatasetResponse);

					// Commit Dataset
					JSONObject commitDatasetFilesResponse = commitDatasetFiles(createDatasetResponse);
					if (isDatasetCommited(commitDatasetFilesResponse) == true) {
						// Update dataset with UID
						DatasetParameter.setUID(getContext(),
								((JSONObject) createDatasetResponse.getJSONArray("datasetOutput").get(0))
										.getJSONObject("dataset").getString("uid"));
						DatasetParameter.commit(getContext());
						areFilesUploaded = Boolean.TRUE;
					} else {
						areFilesUploaded = Boolean.FALSE;
					}
				}
			} else {
				Constants.LOGGER.info(Messages.Dataset.NoFilesAvailableToUpload);
				areFilesUploaded = Boolean.FALSE;
			}
		} catch (Exception e) {
			Constants.LOGGER.error(Messages.Dataset.UploadFilesError + e.getMessage());
			areFilesUploaded = Boolean.FALSE;
			throw e;
		}
		return areFilesUploaded;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "UploadFiles";
	}

	// BEGIN EXTRA CODE

	private static final String FILE_EXTENSION_STRING = "fileExtension";

	/*
	 * commitDatasetFiles service would return updated JSONArray in response. It
	 * should contain UID of the dataset passed as input.
	 */
	private boolean isDatasetCommited(JSONObject commitDatasetFilesResponse) {
		boolean sucess = Boolean.FALSE;
		if (commitDatasetFilesResponse.getJSONArray("updated").length() > 0) {
			JSONObject updated = (JSONObject) commitDatasetFilesResponse.getJSONArray("updated").get(0);
			int length = updated.getString("uid").length();
			if (length > 0) {
				sucess = Boolean.TRUE;
			}
		}
		return sucess;
	}

	/*
	 * createDataset service would return Dataset UID in datasetOutput
	 */
	private boolean isDatasetCreated(JSONObject createDatasetResponse) {
		boolean success = Boolean.FALSE;
		if (createDatasetResponse.getJSONArray("datasetOutput").length() > 0) {
			JSONObject datasetOutput = (JSONObject) createDatasetResponse.getJSONArray("datasetOutput").get(0);
			JSONObject dataset = datasetOutput.getJSONObject("dataset");
			int length = dataset.getString("uid").length();
			if (length > 0) {
				success = Boolean.TRUE;
			}
		}
		return success;
	}

	/*
	 * Sequence of Substitution objects added to ArrayList is important. It needs to
	 * be in sequence as mentioned in JSON Template for commitDatasetFiles
	 */
	private ArrayList<String> createSubstitutionsForCommitDatasetFiles(JSONObject createDatasetResponse)
			throws CoreException {
		ArrayList<String> substitutions = new java.util.ArrayList<>();
		JSONObject datasetOutput = (JSONObject) createDatasetResponse.getJSONArray("datasetOutput").get(0);
		JSONObject dataset = datasetOutput.getJSONObject("dataset");

		substitutions.add(checkForNull(dataset.getString("uid")));
		substitutions.add(checkForNull(DatasetParameter.getdataset_type(getContext())));
		substitutions.add(checkForNull(this.DatasetParameter.getDocuments().get(0).getName()));
		substitutions.add(checkForNull(NamedReference));
		substitutions.add(checkForNull(getTicket(datasetOutput)));
		return substitutions;
	}

	private String checkForNull(String input) {
		return input != null ? input : "";
	}

	/*
	 * retrieve ticket from createDataset response
	 */
	private String getTicket(JSONObject datasetOutput) {
		// ticket information
		JSONObject commitInfo = datasetOutput.getJSONArray("commitInfo").getJSONObject(0);
		JSONObject datasetFileTicketInfos = commitInfo.getJSONArray("datasetFileTicketInfos").getJSONObject(0);
		return datasetFileTicketInfos.getString("ticket");
	}

	private ArrayList<String> createSubstitutionsForCreateDatasets() throws CoreException {
		ArrayList<String> substitutions = new java.util.ArrayList<>();

		substitutions.add(checkForNull(DatasetParameter.getobject_name(getContext())));
		substitutions.add(checkForNull(DatasetParameter.getdataset_type(getContext())));
		substitutions.add(checkForNull(DatasetParameter.getobject_desc(getContext())));
		substitutions.add(checkForNull(NamedReference));
		substitutions.add(checkForNull(this.DatasetParameter.getDocuments().get(0).getName()));
		return substitutions;
	}

	/*
	 * Upload File to FMS.
	 */
	private void uploadFiletoFMS(JSONObject createDatasetResponse)
			throws UnknownHostException, FSCException, CoreException {
		JSONObject datasetOutput = (JSONObject) createDatasetResponse.getJSONArray("datasetOutput").get(0);
		// get ticket
		String ticket = getTicket(datasetOutput);
		CommonsFSCWholeFileIOImpl fscFileIOImpl = FMSUtils.initializeFMS(getContext(), ConfigurationName);

		// open stream to upload file to FMS
		InputStream is = Core.getFileDocumentContent(getContext(),
				this.DatasetParameter.getDocuments().get(0).getMendixObject());

		// This API throws exception if file upload is unsuccessful.
		fscFileIOImpl.upload("TCM", null, ticket, is, this.DatasetParameter.getDocuments().get(0).getSize());
	}

	private static String createServiceInput(String jsonTemplate, ArrayList<String> substitutions) {
		for (int i = 0; i < substitutions.size(); i++) {
			String replacement = substitutions.get(i);
			String target = "{" + (i + 1) + "}";
			jsonTemplate = jsonTemplate.replace(target, replacement);
		}
		return jsonTemplate;
	}

	private JSONObject createDatasets() throws Exception {
		isTextFileType();
		// Create Dataset JSON Template
		String createDatasetJT = "\r\n" + "{\r\n" + "    \"input\": [\r\n" + "        {\r\n"
				+ "            \"clientId\": \"TCM\",\r\n" + "            \"container\": \"\",\r\n"
				+ "            \"datasetFileInfos\": [\r\n" + "                {\r\n"
				+ "                    \"fileName\": \"{5}\",\r\n"
				+ "                    \"namedReferenceName\": \"{4}\",\r\n" + "				     \"isText\":"
				+ isTextFileType + ",\r\n" + "                    \"clientId\": \"\",\r\n"
				+ "                    \"allowReplace\": false\r\n" + "                }\r\n" + "            ],\r\n"
				+ "            \"relationType\": \"\",\r\n" + "            \"name\": \"{1}\",\r\n"
				+ "            \"type\": \"{2}\",\r\n" + "            \"description\": \"{3}\",\r\n"
				+ "            \"datasetId\": \"\",\r\n" + "            \"datasetRev\": \"\",\r\n"
				+ "            \"toolUsed\": \"\",\r\n" + "            \"attrs\": [],\r\n"
				+ "            \"nrObjectInfos\": []\r\n" + "        }\r\n" + "    ]\r\n" + "}\r\n" + "\r\n" + "\r\n"
				+ "";

		// substitutions for createDatasets
		ArrayList<String> substitutions = createSubstitutionsForCreateDatasets();
		createDatasetJT = createServiceInput(createDatasetJT, substitutions);

		return TcConnection.callTeamcenterService(getContext(), Constants.OPERATION_CREATEDATASETS, createDatasetJT,
				new JSONObject(), ConfigurationName);
	}

	private JSONObject commitDatasetFiles(JSONObject createDatasetResponse) throws Exception {
		// commitDatasetFiles JSON Template
		String commitDatasetFilesJT = "\r\n" + "{\r\n" + "	\"commitInput\": [{\r\n" + "			\"dataset\": {\r\n"
				+ "				\"uid\": \"{1}\",\r\n" + "				\"type\": \"{2}\"\r\n" + "			},\r\n"
				+ "			\"createNewVersion\": true,\r\n" + "			\"datasetFileTicketInfos\": [{\r\n"
				+ "					\"datasetFileInfo\": {\r\n" + "						\"clientId\": \"\",\r\n"
				+ "						\"fileName\": \"{3}\",\r\n"
				+ "						\"namedReferencedName\": \"{4}\",\r\n" + "						\"isText\":"
				+ isTextFileType + ",\r\n" + "						\"allowReplace\": false\r\n"
				+ "					},\r\n" + "					\"ticket\": \"{5}\"\r\n" + "				}\r\n"
				+ "			]\r\n" + "		}\r\n" + "	]\r\n" + "}\r\n" + "\r\n" + "\r\n" + "";

		// substitutions for commitDatasetFiles
		ArrayList<String> substitutions = createSubstitutionsForCommitDatasetFiles(createDatasetResponse);
		commitDatasetFilesJT = createServiceInput(commitDatasetFilesJT, substitutions);
		return TcConnection.callTeamcenterService(getContext(), Constants.OPERATION_COMMITDATASETFILES,
				commitDatasetFilesJT, new JSONObject(), ConfigurationName);
	}

	private Boolean isTextFileType = false;

	/**
	 * 
	 * @return true in case fileFormat is Text false in case of Binary
	 * @throws Exception
	 */
	private void isTextFileType() throws Exception {
		JSONObject getDatasetTypeInfoResponse = getDatasetTypeInfo();
		JSONArray infosJA = getDatasetTypeInfoResponse.getJSONArray("infos");
		JSONArray refInfosJA = infosJA.getJSONObject(0).getJSONArray("refInfos");
		String fileExtension = "*." + FilenameUtils.getExtension(this.DatasetParameter.getDocuments().get(0).getName());

		Boolean foundNamedReferenceAndFileExtension = false;
		for (int i = 0; i < refInfosJA.length(); i++) {
			JSONObject refInfoJO = refInfosJA.getJSONObject(i);
			if (refInfoJO.getString("referenceName").compareToIgnoreCase(NamedReference) == 0
					&& (refInfoJO.getString(FILE_EXTENSION_STRING).compareToIgnoreCase(fileExtension) == 0
							|| allowAnyFileType(refInfoJO.getString(FILE_EXTENSION_STRING)) == Boolean.TRUE)) {
				isTextFileType = (refInfoJO.getString("fileFormat").compareToIgnoreCase("TEXT") == 0 ? Boolean.TRUE
						: Boolean.FALSE);
				foundNamedReferenceAndFileExtension = true;
				break;
			}
		}
		if (Boolean.FALSE.equals(foundNamedReferenceAndFileExtension)) {
			throw new Exception(createServiceInput(Messages.Dataset.InvalidNamedReferenceFileExtensionCombination,
					createSubstitutionsForNamedReferenceFileExtensionMismatch(fileExtension)));
		}
	}

	private boolean allowAnyFileType(String fileType) {
		boolean answer = Boolean.FALSE;
		if (fileType != null && !fileType.isEmpty()
				&& (fileType.compareTo("*") == 0 || fileType.compareTo("*.*") == 0)) {
			answer = Boolean.TRUE;
		}
		return answer;
	}

	private ArrayList<String> createSubstitutionsForNamedReferenceFileExtensionMismatch(String fileExtension) {
		String datasetType = DatasetParameter.getdataset_type(getContext());
		ArrayList<String> substitutions = new java.util.ArrayList<>();
		substitutions.add(datasetType);
		substitutions.add(NamedReference);
		substitutions.add(fileExtension);
		return substitutions;
	}

	private ArrayList<String> createSubstitutionsForGetDatasetTypeInfo() {
		String datasetType = DatasetParameter.getdataset_type(getContext());
		ArrayList<String> substitutions = new java.util.ArrayList<>();
		substitutions.add(datasetType);
		return substitutions;
	}

	private JSONObject getDatasetTypeInfo() throws Exception {
		// getAvailableTypesWithDisplayNames JSON Template
		String getDatasetTypeInfoJT = "{\r\n" + "        \"datasetTypeNames\": [\r\n" + "             \"{1}\"\r\n"
				+ "             ]\r\n" + "            }\r\n" + "    }";
		// substitutions for createDatasets
		ArrayList<String> substitutions = createSubstitutionsForGetDatasetTypeInfo();
		getDatasetTypeInfoJT = createServiceInput(getDatasetTypeInfoJT, substitutions);

		return TcConnection.callTeamcenterService(getContext(), Constants.OPERATION_GETDATASETTYPEINFO,
				getDatasetTypeInfoJT, new JSONObject(), ConfigurationName);
	}
	// END EXTRA CODE
}
