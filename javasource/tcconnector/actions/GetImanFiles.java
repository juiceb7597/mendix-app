// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package tcconnector.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import tcconnector.foundation.JModelObject;
import tcconnector.foundation.JServiceData;
import tcconnector.foundation.TcConnection;
import tcconnector.foundation.exceptions.NotLoadedExcpetion;
import tcconnector.internal.foundation.Constants;
import tcconnector.internal.foundation.Messages;
import tcconnector.proxies.ImanFile;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * SOA URL: 
 * Core-2006-03-DataManagement/getProperties
 * 
 * Read the meta properties of type ImanFile objects associated with input Dataset object 
 * 
 * Input -
 * - Dataset object having UID
 * 
 * Output -
 * - Returns List of ImanFiles associated with input Dataset object
 * 
 */
public class GetImanFiles extends UserAction<java.util.List<IMendixObject>>
{
	/** @deprecated use DatasetParameter.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __DatasetParameter;
	private final tcconnector.proxies.Dataset DatasetParameter;
	private final java.lang.String ConfigurationName;

	public GetImanFiles(
		IContext context,
		IMendixObject _datasetParameter,
		java.lang.String _configurationName
	)
	{
		super(context);
		this.__DatasetParameter = _datasetParameter;
		this.DatasetParameter = _datasetParameter == null ? null : tcconnector.proxies.Dataset.initialize(getContext(), _datasetParameter);
		this.ConfigurationName = _configurationName;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		List<IMendixObject> files;
		try {
			JSONObject refList = retrieveDatasetRefList();
			files = retrieveImanFiles(refList, DatasetParameter, true);

		} catch (Exception e) {
			Constants.LOGGER.error(Messages.Dataset.DownloadFilesError + e.getMessage());
			throw e;
		}
		return files;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetImanFiles";
	}

	// BEGIN EXTRA CODE

	private static String checkForNull(String input) {
		return input.length() > 0 ? input : "";
	}

	private JSONObject getFileDetails(String fileUID) throws Exception {
		String body = "\r\n" + "{\r\n" + "    \"objects\": [\r\n" + "        \"{1}\"\r\n" + "    ],\r\n"
				+ "    \"attributes\": [\r\n" + "        \"file_size\",\r\n" + "        \"creation_date\",\r\n"
				+ "        \"last_mod_date\",\r\n" + "        \"original_file_name\",\r\n" + "    ]\r\n" + "}\r\n"
				+ "\r\n" + "";

		// substitutions for createDatasets
		ArrayList<String> substitutions = createSubstitutionsForGetProperties(fileUID);
		body = createServiceInput(body, substitutions);
		return TcConnection.callTeamcenterService(getContext(), Constants.OPERATION_GETPROPERTIES, body,
				new JSONObject(), ConfigurationName);
	}

	private static ArrayList<String> createSubstitutionsForGetProperties(java.lang.String uid) throws CoreException {
		ArrayList<String> substitutions = new java.util.ArrayList<>();
		substitutions.add(checkForNull(uid));
		return substitutions;
	}

	/*
	 * Retrieve ImanFile UID & File name
	 */
	public List<IMendixObject> retrieveImanFiles(JSONObject fileRefListResponse, tcconnector.proxies.Dataset dataset,
			boolean detailsRequired) throws Exception {

		JServiceData object = (JServiceData) fileRefListResponse;
		List<JModelObject> plainObjects = object.getPlainObjects();
		List<IMendixObject> imanFileObjects = new ArrayList<>();

		for (int i = 0; i < plainObjects.size(); i++) {
			JModelObject dataSet = plainObjects.get(i);

			if (dataSet != null && dataSet.getUID().equals(dataset.getUID())) {
				try {
					List<JModelObject> dbValues = dataSet.getPropertyValueAsModelObjects("ref_list");
					for (int j = 0; j < dbValues.size(); j++) {
						IMendixObject imanFileObject = Core.instantiate(getContext(),
								tcconnector.proxies.ImanFile.entityName);
						ImanFile imanFile = ImanFile.initialize(getContext(), imanFileObject);
						imanFile.setimanFiles(dataset);
						imanFile.setfileID(dbValues.get(j).getUID());

						if (detailsRequired) {
							JSONObject details = getFileDetails(dbValues.get(j).getUID());
							JModelObject detailObj = ((JServiceData) details).getPlainObjects().get(0);
							imanFile.setname(detailObj.getPropertyValueAsString("original_file_name"));
							imanFile.setsize(detailObj.getPropertyValueAsString("file_size"));
							imanFile.setcreationDate(detailObj.getPropertyValueAsDate("creation_date"));
							imanFile.setlastModifiedDate(detailObj.getPropertyValueAsDate("last_mod_date"));
						}

						imanFileObjects.add(imanFile.getMendixObject());
					}
				} catch (NotLoadedExcpetion e) {
					/*
					 * In catch means there is empty ref_list. This is valid scenario and ignore
					 * this exception
					 */
				}
			}
		}

		return imanFileObjects;
	}

	private static String createServiceInput(String jsonTemplate, ArrayList<String> substitutions) {
		for (int i = 0; i < substitutions.size(); i++) {
			String replacement = substitutions.get(i);
			String target = "{" + (i + 1) + "}";
			jsonTemplate = jsonTemplate.replace(target, replacement);
		}
		return jsonTemplate;
	}

	private JSONObject retrieveDatasetRefList() throws Exception {
		// Create getProperties ref_list JSON template
		String body = "\r\n" + "{\r\n" + "    \"objects\": [\r\n" + "        \"{1}\"\r\n" + "    ],\r\n"
				+ "    \"attributes\": [\r\n" + "        \"ref_list\",\r\n" + "		\"last_mod_date\" \r\n	]\r\n"
				+ "}\r\n" + "\r\n" + "";
		// substitutions for createDatasets
		ArrayList<String> substitutions = createSubstitutionsForGetProperties(DatasetParameter.getUID(getContext()));
		body = createServiceInput(body, substitutions);

		return TcConnection.callTeamcenterService(getContext(), Constants.OPERATION_GETPROPERTIES, body,
				new JSONObject(), ConfigurationName);
	}
	// END EXTRA CODE
}
