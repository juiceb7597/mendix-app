// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package teamcentertoolkit.actions;

import java.io.InputStream;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import system.proxies.FileDocument;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import static java.util.Objects.requireNonNull;
import com.mendix.systemwideinterfaces.core.UserAction;

public class JA_CopyToTcFileDocument extends UserAction<IMendixObject>
{
	/** @deprecated use fileDocument.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __fileDocument;
	private final system.proxies.FileDocument fileDocument;

	public JA_CopyToTcFileDocument(
		IContext context,
		IMendixObject _fileDocument
	)
	{
		super(context);
		this.__fileDocument = _fileDocument;
		this.fileDocument = _fileDocument == null ? null : system.proxies.FileDocument.initialize(getContext(), _fileDocument);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		FileDocument tcFileDocument = createTcFileDocument();
		
		duplicateFileDocument(getContext(), fileDocument, tcFileDocument.getMendixObject());
		
		return tcFileDocument.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_CopyToTcFileDocument";
	}

	// BEGIN EXTRA CODE
	private FileDocument createTcFileDocument() {
		return new tcconnector.proxies.FileDocument(getContext());
	}
	
	private void duplicateFileDocument(IContext context, FileDocument origin, IMendixObject target) throws CoreException {
		requireNonNull(origin, "Cannot copy FileDocument because no origin is provided");
		requireNonNull(target, "Cannot copy FileDocument because no target is provided");

		if (!origin.getHasContents()) {
			// In contrast to the Community Commons action we do allow for FileDocuments without content.
			return;
		}
		try {
			InputStream inputStream = Core.getFileDocumentContent(context, origin.getMendixObject());
			Core.storeFileDocumentContent(context, target, origin.getName(), inputStream);
		}
		catch (Exception e) {
			throw new CoreException("Cannot copy the content of the FileDocument to a TcConnector.FileDocument because " + e.getMessage());
		}
	}

	
	// END EXTRA CODE
}
