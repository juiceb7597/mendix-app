// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package teamcentertoolkit.actions;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import com.mendix.core.objectmanagement.member.MendixDateTime;
import com.mendix.core.objectmanagement.member.MendixObjectReference;
import com.mendix.core.objectmanagement.member.MendixObjectReferenceSet;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import tcconnector.proxies.UpdatedPropertiesInput;
import tcconnector.proxies.ValuesInput;
import teamcentertoolkit.impl.Utils;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import static java.util.Objects.requireNonNull;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Creates a list of TcConnector.UpdatedPropertiesInput with associated TcConnector.ValuesInput objects for each attribute of the CreateInputBase input parameter. When empty, no attributes will be converted. 
 * 
 * For these attributes, the UpdatedPropertiesInput objects contain the attribute name and the ValuesInput objects contain the value. The resulting UpdatedPropertiesInput objects are associated with the ModelObject input parameter; the corresponding ValuesInput object to the UpdatedPropertiesInput.
 */
public class JA_CreateUpdatedPropertiesInputWithValuesInput extends UserAction<java.lang.Void>
{
	/** @deprecated use sourceModelObject.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __sourceModelObject;
	private final tcconnector.proxies.ModelObject sourceModelObject;
	/** @deprecated use targetModelObject.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __targetModelObject;
	private final tcconnector.proxies.ModelObject targetModelObject;
	private final java.lang.String attributesToInclude;

	public JA_CreateUpdatedPropertiesInputWithValuesInput(
		IContext context,
		IMendixObject _sourceModelObject,
		IMendixObject _targetModelObject,
		java.lang.String _attributesToInclude
	)
	{
		super(context);
		this.__sourceModelObject = _sourceModelObject;
		this.sourceModelObject = _sourceModelObject == null ? null : tcconnector.proxies.ModelObject.initialize(getContext(), _sourceModelObject);
		this.__targetModelObject = _targetModelObject;
		this.targetModelObject = _targetModelObject == null ? null : tcconnector.proxies.ModelObject.initialize(getContext(), _targetModelObject);
		this.attributesToInclude = _attributesToInclude;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE

		requireNonNull(sourceModelObject, "sourceModelObject is required.");
		requireNonNull(targetModelObject, "targetModelObject is required.");
		
		createUpdatedPropertiesInputWithValuesInput();
				
		return null; 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_CreateUpdatedPropertiesInputWithValuesInput";
	}

	// BEGIN EXTRA CODE

	/**
	 * Creates UpdatedPropertiesInput and ValuesInput objects for each attribute of the
	 * sourceObject parameter. The UpdatedPropertiesInput object contains the attribute
	 * name; the ValuesInput object contains the attributes value.
	 * 
	 * The UpdatedPropertiesInput objects are associated with the targetObject and
	 * the ValuesInput to their corresponding UpdatedPropertiesInput.
	 */
	private void createUpdatedPropertiesInputWithValuesInput() {
		IContext context = getContext();

		if (attributesToInclude == null || attributesToInclude.isBlank()) {
			return;
		}
		
		List<String> attributesToIncludeArray = Arrays.asList(attributesToInclude.split(","));

		sourceModelObject.getMendixObject().getMembers(context).entrySet()
			.stream()
			.filter(entry -> attributesToIncludeArray.contains(entry.getKey()))
			.filter(entry -> Utils.isAttribute(entry.getValue()))
			.forEach(entry -> {
				UpdatedPropertiesInput updatedPropertiesInput = createUpdatedPropertiesInput(context, entry.getKey());											
				createValuesInput(context, updatedPropertiesInput, entry.getValue());
			});
	}

	/**
	 * Creates and returns UpdatedPropertiesInput based on an attribute, defined by 
	 * attributeName, of the sourceObject parameter. The UpdatedPropertiesInput object 
	 * is associated with the targetObject.
	 *  
	 * @param context to use
	 * @param attributeName to extract
	 * @return UpdatedPropertiesInput
	 */	
	private UpdatedPropertiesInput createUpdatedPropertiesInput(IContext context, String attributeName) {
		UpdatedPropertiesInput updatedProperties = new UpdatedPropertiesInput(context);
		updatedProperties.setname(attributeName);
		updatedProperties.setobjectsSetProperties(context, targetModelObject);
		
		return updatedProperties;
	}

	/**
	 * Creates and returns a ValueInput based on an attribute, defined by 
	 * objectMember. The ValueInput object is associated with the UpdatedPropertiesInput
	 * parameter.
	 * 
	 * @param context to use
	 * @param updatedPropertiesInput to associate to
	 * @return ValueInput
	 */
	private ValuesInput createValuesInput(IContext context, UpdatedPropertiesInput updatedPropertiesInput,
			IMendixObjectMember<?> objectMember) {
		String value = objectMember.parseValueToString(context);
		
		// If objectMember is a MendixDateTime, then you want to format the value to a date-time string
		if (objectMember instanceof MendixDateTime && !StringUtils.isEmpty(value)) {
		    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
		    Date date = new Date(Long.parseLong(value));
			value = dateFormat.format(date);
		}
		
		ValuesInput valuesInput = new ValuesInput(context);
		valuesInput.setvalue(value);
		valuesInput.setvalues(updatedPropertiesInput);

		return valuesInput;
	}	
	
	// END EXTRA CODE
}
